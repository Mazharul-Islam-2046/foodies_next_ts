datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum Cuisine {
  ITALIAN
  CHINESE
  INDIAN
  JAPANESE
  THAI
  MEXICAN
  AMERICAN
  FRENCH
  TURKISH
  MEDITERRANEAN
  GREEK
  KOREAN
  VIETNAMESE
  SPANISH
  MIDDLE_EASTERN
  AFRICAN
  BBQ
  BURGER
  PIZZA
  SUSHI
  SEAFOOD
  VEGAN
  VEGETARIAN
  DESSERTS
  FAST_FOOD
}

enum DeliveryOption {
  PICKUP
  DELIVERY
  DINE_IN
}

enum DeliveryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SpiceLevel {
  NONE
  MILD
  MEDIUM
  HOT
  EXTRA_HOT
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  favoriteRestaurants String[] @db.ObjectId
  favoriteFoods       String[] @db.ObjectId

  role          Role            @default(USER) // Possible values: USER, ADMIN
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  image        String
  category     String
  prepTime     Int
  spiceLevel   SpiceLevel @default(NONE)
  ratings      Float?  @default(0)
  cuisine      Cuisine
  restaurantId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  location        String
  coverImage      String
  category        String
  ratings         Float?           @default(0)
  cusines         Cuisine[]
  ownerId         String           @db.ObjectId
  deliveryOptions DeliveryOption[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  foodId        String         @db.ObjectId
  restaurantId  String         @db.ObjectId
  quantity      Int
  totalPrice    Float
  status        DeliveryStatus @default(PENDING)
  address       String
  contactNumber String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
